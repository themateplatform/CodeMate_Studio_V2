/**
 * File Generator - Generate actual code files from templates
 */

import { Recipe, GeneratedFiles } from "./types";
import { renderLayoutTemplate } from "../templates/components/layout.template.ts";
import { renderPageTemplate } from "../templates/components/page.template.ts";
import { renderFormTemplate } from "../templates/components/form.template.ts";

function renderComponentStub(name: string, recipeName: string): string {
  return `export interface ${name}Props {
  title?: string;
  description?: string;
  children?: React.ReactNode;
}

export default function ${name}({ 
  title = "${name}", 
  description = "Generated component for the ${recipeName} experience.",
  children
}: ${name}Props) {
  return (
    <div className="rounded-lg border border-slate-800 bg-slate-900 p-6 text-slate-100">
      <h3 className="text-xl font-semibold mb-2">{title}</h3>
      <p className="text-sm text-slate-400 mb-4">{description}</p>
      {children}
    </div>
  );
}
`;
}

function generatePackageJson(recipeName: string): string {
  return JSON.stringify({
    name: `${recipeName}-app`,
    version: "1.0.0",
    type: "module",
    scripts: {
      dev: "vite",
      build: "vite build",
      preview: "vite preview"
    },
    dependencies: {
      react: "^18.3.1",
      "react-dom": "^18.3.1"
    },
    devDependencies: {
      "@types/react": "^18.3.3",
      "@types/react-dom": "^18.3.0",
      "@vitejs/plugin-react": "^4.3.1",
      typescript: "^5.5.3",
      vite: "^7.1.9"
    }
  }, null, 2);
}

function generateViteConfig(): string {
  return `import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    open: true
  }
});
`;
}

function generateTsConfig(): string {
  return JSON.stringify({
    compilerOptions: {
      target: "ES2020",
      useDefineForClassFields: true,
      lib: ["ES2020", "DOM", "DOM.Iterable"],
      module: "ESNext",
      skipLibCheck: true,
      moduleResolution: "bundler",
      allowImportingTsExtensions: true,
      isolatedModules: true,
      moduleDetection: "force",
      noEmit: true,
      jsx: "react-jsx",
      strict: true,
      noUnusedLocals: true,
      noUnusedParameters: true,
      noFallthroughCasesInSwitch: true,
      noUncheckedSideEffectImports: true
    },
    include: ["src"]
  }, null, 2);
}

function generateIndexHtml(recipeName: string): string {
  return `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>${recipeName.charAt(0).toUpperCase() + recipeName.slice(1)} App</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
`;
}

function generateMainTsx(): string {
  return `import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
`;
}

function generateIndexCss(): string {
  return `* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
    Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #0f172a;
  color: #f1f5f9;
}

#root {
  min-height: 100vh;
}
`;
}

function generateReadme(recipeName: string, recipe: Recipe): string {
  return `# ${recipeName.charAt(0).toUpperCase() + recipeName.slice(1)} App

Generated by CodeMate Studio

## Features

- ${recipe.pages.length} pages
- ${recipe.components.length} components
- TypeScript + React
- Vite for fast development

## Getting Started

\`\`\`bash
# Install dependencies
npm install

# Start development server
npm run dev

# Build for production
npm run build
\`\`\`

## Project Structure

\`\`\`
src/
  ├── App.tsx          # Main app component with routing
  ├── main.tsx         # Entry point
  ├── index.css        # Global styles
  ├── pages/           # Page components
  └── components/      # Reusable components
\`\`\`

## Pages

${recipe.pages.map(page => `- **${page.name}** - ${page.route}`).join('\n')}

## Components

${recipe.components.map(comp => `- **${comp.name}** - ${comp.template}`).join('\n')}

## Data Models

${recipe.dataModels.map(model => `- **${model.name}** - ${model.fields.map(f => f.name).join(', ')}`).join('\n')}

---

Built with ❤️ by CodeMate Studio
`;
}

export function generateFiles(recipe: Recipe): GeneratedFiles {
  const files: GeneratedFiles = {};

  // Generate configuration files
  files["package.json"] = generatePackageJson(recipe.name);
  files["vite.config.ts"] = generateViteConfig();
  files["tsconfig.json"] = generateTsConfig();
  files["index.html"] = generateIndexHtml(recipe.name);
  files["README.md"] = generateReadme(recipe.name, recipe);

  // Generate source files
  files["src/main.tsx"] = generateMainTsx();
  files["src/index.css"] = generateIndexCss();

  // Generate main App layout with routing
  files["src/App.tsx"] = renderLayoutTemplate(recipe);

  // Generate page components
  recipe.pages.forEach((page) => {
    files[`src/pages/${page.name}.tsx`] = renderPageTemplate(page.name, recipe.name);
  });

  // Generate additional components based on template type
  recipe.components.forEach((component) => {
    if (component.template === "form") {
      files[`src/components/${component.name}.tsx`] = renderFormTemplate(component.name, recipe.name);
      return;
    }

    files[`src/components/${component.name}.tsx`] = renderComponentStub(component.name, recipe.name);
  });

  return files;
}

/**
 * Generate file tree structure for preview
 */
export function generateFileTree(files: GeneratedFiles): string[] {
  return Object.keys(files).sort();
}

/**
 * Get file count by type
 */
export function getFileStats(files: GeneratedFiles): {
  total: number;
  pages: number;
  components: number;
  config: number;
} {
  const fileList = Object.keys(files);
  
  return {
    total: fileList.length,
    pages: fileList.filter(f => f.startsWith('src/pages/')).length,
    components: fileList.filter(f => f.startsWith('src/components/')).length,
    config: fileList.filter(f => !f.startsWith('src/')).length
  };
}

